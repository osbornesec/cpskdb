[build-system]
requires = ["setuptools>=61.2", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "cpskdb"
version = "0.1.0"
description = "Agentic RAG system for multi-product technical data with high accuracy, auditability, and data privacy"
requires-python = ">=3.11"
authors = [
    {name = "CPSKDB Maintainers", email = "maintainers@cpskdb.example.com"},
]
license = {text = "MIT"}
readme = "README.md"
keywords = ["rag", "ai", "vector-database", "fastapi", "langgraph", "qdrant"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    # Core Framework
    "fastapi[standard]>=0.113.0,<0.116.0",
    "pydantic>=2.7.0,<3.0.0",
    
    # AI/ML Orchestration
    "langgraph>=0.3.27",
    "langchain>=0.2.0",
    "langchain-core>=0.2.38",
    
    # Vector Database
    "qdrant-client[fastembed]>=1.7.0",
    
    # LLM/Embedding Providers
    "voyageai>=0.3.2",
    "cohere>=5.15.0",
    
    # HTTP Client & Server  
    "httpx[http2]>=0.25.0",
    
    # Configuration Management
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0.0",
]
[project.optional-dependencies]
dev = [
    "pytest>=8.0.0,<9.0.0",
    "pytest-cov>=4.0.0,<5.0.0",
    "ruff>=0.6.0,<1.0.0",
    "mypy>=1.8.0,<2.0.0",
    "black>=23.0.0,<24.0.0",
    "pre-commit>=3.6.0,<4.0.0",
]

[tool.ruff]
line-length = 88
target-version = "py311"
fix = true

[tool.ruff.lint]
# Enable ALL rules for maximum strictness
select = ["ALL"]

ignore = [
    # Formatter conflicts (must be disabled when using ruff-format)
    "W191",    # tab-indentation
    "E111",    # indentation-with-invalid-multiple  
    "E114",    # indentation-with-invalid-multiple-comment
    "E117",    # over-indented
    "E501",    # line-too-long (handled by formatter)
    "COM812",  # trailing-comma-missing (conflicts with formatter)
    "ISC001",  # single-line-implicit-string-concatenation (conflicts with formatter)
    
    # Conflicting docstring rules (choose one convention)
    "D203",    # one-blank-line-before-class (conflicts with D211)
    "D213",    # multi-line-summary-second-line (conflicts with D212)
    
    # Overly pedantic rules that may not be practical
    "ANN101",  # missing-type-self (self is implicit)
    "ANN102",  # missing-type-cls (cls is implicit)
    "TD002",   # missing-author-in-todo (too pedantic)
    "TD003",   # missing-issue-link-in-todo (too pedantic)
    "FIX002",  # line-contains-todo (allow TODO comments)
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101",    # Allow assert statements in tests
    "PLR2004", # Allow magic values in tests
    "ANN001",  # Allow missing type annotations in tests (for fixtures)
    "ANN201",  # Allow missing return type annotations in tests
    "D100",    # Allow missing docstrings in test modules
    "D103",    # Allow missing docstrings in test functions
    "SLF001",  # Allow accessing private members in tests
]
"scripts/**/*.py" = [
    "T201",    # Allow print statements in scripts
    "PLR2004", # Allow magic values in scripts
]

[tool.ruff.lint.pydocstyle]
convention = "google"  # Use Google docstring convention

[tool.ruff.lint.isort]
known-first-party = ["cpskdb"]
force-single-line = false
combine-as-imports = true

[tool.ruff.lint.mccabe]
max-complexity = 10  # Strict complexity limit

[tool.ruff.lint.pylint]
max-args = 5         # Strict argument limit
max-locals = 15      # Strict local variable limit
max-branches = 12    # Strict branching limit

[tool.black]
line-length = 88
target-version = ["py311"]

# Strict formatting options
skip-string-normalization = false  # Normalize quotes to double quotes
skip-magic-trailing-comma = false  # Use trailing commas for better diffs
preview = false  # Use stable features only for consistency

[tool.mypy]
python_version = "3.11"

# Enable strict mode (enables all optional error checking flags)
strict = true

# Additional strict settings beyond strict mode
warn_unreachable = true
warn_unused_ignores = true
warn_unused_configs = true
warn_redundant_casts = true
warn_return_any = true

# Disallow any types for maximum type safety
disallow_any_unimported = true
disallow_any_expr = false  # Too strict for most codebases, enable with caution
disallow_any_decorated = true
disallow_any_explicit = true
disallow_subclassing_any = true

# Error reporting
show_error_codes = true
show_column_numbers = true
pretty = true
error_summary = true

# Strict optional handling
no_implicit_optional = true

# Import discovery
namespace_packages = true
explicit_package_bases = true

# Per-module configuration for different strictness levels
[[tool.mypy.overrides]]
module = "tests.*"
disallow_any_explicit = false
disallow_any_decorated = false
disallow_untyped_defs = false
warn_return_any = false

[[tool.mypy.overrides]]
module = "scripts.*"
disallow_any_explicit = false
disallow_any_decorated = false
warn_return_any = false

[tool.bandit]
# Security scanning configuration
exclude_dirs = ["tests", "scripts"]
skips = ["B101"]  # Allow assert statements (handled by ruff S101)

[tool.pydocstyle]
# Documentation style configuration (integrated with ruff's pydocstyle)
convention = "google"
inherit = false
match = "(?!test_).*\\.py"
match-dir = "(?!tests)[^\\.].*"
